{"version":3,"sources":["FriendCard.js","App.js","serviceWorker.js","index.js"],"names":["ACTIVITY_TYPES","FriendCard","data","idx","save","useState","friend","setFriend","getNewActivity","a","fetch","res","json","activity","price","accessibility","prev","updated","className","name","email","value","type","id","onChange","e","persist","target","map","key","onClick","prev_state","JSON","parse","localStorage","getItem","1","2","3","4","sortable","Object","entries","sort","b","localeCompare","reduce","r","k","v","App","saveFriend","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAEMA,EAAiB,CACrB,YACA,eACA,SACA,MACA,UACA,UACA,aACA,QACA,YA4DaC,MAzDf,YAA0C,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,IAAKC,EAAQ,EAARA,KAAQ,EACXC,mBAASH,GADE,mBAChCI,EADgC,KACxBC,EADwB,KAOjCC,EAAc,uCAAG,oCAAAC,EAAA,sEACHC,MAAM,sDADH,cACfC,EADe,gBAI4BA,EAAIC,OAJhC,gBAIbC,EAJa,EAIbA,SAAUC,EAJG,EAIHA,MAAOC,EAJJ,EAIIA,cACzBR,GAAU,SAACS,GACT,IAAMC,EAAO,eACRD,EADQ,CAEXH,SAAUA,EACVC,MAAOA,EACPC,cAAeA,IAGjB,OADAX,EAAKD,EAAKc,GACHA,KAbY,4CAAH,qDAiBpB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,wBAAwBf,GACrC,wBAAIe,UAAU,cAAcZ,EAAOa,MACnC,wBAAID,UAAU,iCAAiCZ,EAAOc,OACtD,yBAAKF,UAAU,yCACb,4BACEA,UAAU,wBACVG,MAAOf,EAAOgB,KACdC,GAAE,+BAA0BjB,EAAOiB,IACnCC,SAjCW,SAACC,GACpBA,EAAEC,UACFnB,GAAU,SAACS,GAAD,sBAAgBA,EAAhB,CAAsBM,KAAMG,EAAEE,OAAON,aAiCtCrB,EAAe4B,KAAI,SAACN,EAAMnB,GACzB,OACE,4BAAQ0B,IAAK1B,EAAKkB,MAAOC,GACtBA,QAMX,uBAAGJ,UAAU,kBAAkBZ,EAAOO,UACtC,uBAAGK,UAAU,aAAb,eAA6D,GAAvBZ,EAAOS,cAA7C,SACA,uBAAGG,UAAU,aAAb,SAAgCZ,EAAOQ,MAAvC,SACA,4BAAQI,UAAU,kBAAkBY,QAAStB,GAA7C,mBC1DJuB,G,MAAaC,KAAKC,MAAMC,aAAaC,QADhB,yBAGpBJ,IACHA,EAAa,CACXK,EAAG,CACDjB,KAAM,mBACNC,MAAO,yBACPP,SAAU,wBACVC,MAAO,GACPC,cAAe,GACfO,KAAM,gBAERe,EAAG,CACDlB,KAAM,kBACNC,MAAO,8BACPP,SAAU,uCACVC,MAAO,GACPC,cAAe,IACfO,KAAM,gBAERgB,EAAG,CACDnB,KAAM,cACNC,MAAO,2BACPP,SAAU,iCACVS,KAAM,QACNR,MAAO,IACPC,cAAe,IAEjBwB,EAAG,CACDpB,KAAM,mBACNC,MAAO,oBACPP,SAAU,+BACVS,KAAM,eACNR,MAAO,GACPC,cAAe,MAKrB,IAAIyB,EAAWC,OAAOC,QAAQX,GAC3BY,MAAK,kBAAIlC,EAAJ,oBAAWmC,EAAX,2BAAkBnC,EAAEU,KAAK0B,cAAcD,EAAEzB,SAC9C2B,QAAO,SAACC,EAAD,0BAAKC,EAAL,KAAQC,EAAR,2BAAqBF,EAArB,eAAyBC,EAAIC,MAAM,IA+C9BC,MA7Cf,WACE,IAAMC,EAAa,SAACtB,EAAKvB,GACvBkC,EAASX,GAAO,CACdV,KAAMb,EAAOa,KACbC,MAAOd,EAAOc,MACdP,SAAUP,EAAOO,SACjBC,MAAOR,EAAOQ,MACdC,cAAeT,EAAOS,eAGxBmB,aAAakB,QAtDQ,sBAsDkBpB,KAAKqB,UAAUb,KAGxD,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,yCACb,0BAAMA,UAAU,0CACd,oDAGJ,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,uBACZuB,OAAOC,QAAQF,GAAUZ,KAAI,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXR,EAAW,KAC9C,OACE,kBAAC,EAAD,CACEQ,IAAG,iBAAYA,GACf3B,KAAMmB,EACNlB,IAAK0B,EACLzB,KAAM+C,WChEFG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ccdd9731.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst ACTIVITY_TYPES = [\r\n  \"education\",\r\n  \"recreational\",\r\n  \"social\",\r\n  \"diy\",\r\n  \"charity\",\r\n  \"cooking\",\r\n  \"relaxation\",\r\n  \"music\",\r\n  \"busywork\",\r\n];\r\n\r\nfunction FriendCard({ data, idx, save }) {\r\n  const [friend, setFriend] = useState(data);\r\n  const onTypeChange = (e) => {\r\n    e.persist();\r\n    setFriend((prev) => ({ ...prev, type: e.target.value }));\r\n  };\r\n\r\n  const getNewActivity = async () => {\r\n    const res = await fetch(\r\n      `https://www.boredapi.com/api/activity?type=cooking`\r\n    );\r\n    const { activity, price, accessibility } = await res.json();\r\n    setFriend((prev) => {\r\n      const updated = {\r\n        ...prev,\r\n        activity: activity,\r\n        price: price,\r\n        accessibility: accessibility,\r\n      };\r\n      save(idx, updated);\r\n      return updated;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <p className=\"card-text text-muted\">{idx}</p>\r\n        <h5 className=\"card-title\">{friend.name}</h5>\r\n        <h6 className=\"card-subtitle mb-2 text-muted\">{friend.email}</h6>\r\n        <div className=\"form-group row justify-content-center\">\r\n          <select\r\n            className=\"form-control col-sm-6\"\r\n            value={friend.type}\r\n            id={`activity-type-select-${friend.id}`}\r\n            onChange={onTypeChange}\r\n          >\r\n            {ACTIVITY_TYPES.map((type, idx) => {\r\n              return (\r\n                <option key={idx} value={type}>\r\n                  {type}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </div>\r\n        <p className=\"card-text lead\">{friend.activity}</p>\r\n        <p className=\"card-text\">Difficulty: {friend.accessibility * 10} / 10</p>\r\n        <p className=\"card-text\">Cost: {friend.price} / 10</p>\r\n        <button className=\"btn btn-success\" onClick={getNewActivity}>\r\n          Get New Idea\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendCard;\r\n","import React from \"react\";\r\nimport FriendCard from \"./FriendCard\";\r\nimport \"./App.css\";\r\n\r\nconst LOCALSTORAGE_KEY = \"switcher-qa:friends\";\r\nlet prev_state = JSON.parse(localStorage.getItem(LOCALSTORAGE_KEY));\r\n\r\nif (!prev_state) {\r\n  prev_state = {\r\n    1: {\r\n      name: \"Boromir Williams\",\r\n      email: \"neednoking23@yahoo.com\",\r\n      activity: \"Watch a classic movie\",\r\n      price: 0.1,\r\n      accessibility: 0.1,\r\n      type: \"recreational\",\r\n    },\r\n    2: {\r\n      name: \"Samwise Johnson\",\r\n      email: \"samheartspotatoes@gmail.com\",\r\n      activity: \"Learn how to iceskate or rollerskate\",\r\n      price: 0.1,\r\n      accessibility: 0.25,\r\n      type: \"recreational\",\r\n    },\r\n    3: {\r\n      name: \"Frodo Stone\",\r\n      email: \"ringerbearer42@gmail.com\",\r\n      activity: \"Learn to play a new instrument\",\r\n      type: \"music\",\r\n      price: 0.55,\r\n      accessibility: 0.6,\r\n    },\r\n    4: {\r\n      name: \"Galadriel Bogart\",\r\n      email: \"gbogart@gmail.com\",\r\n      activity: \"Repaint a room in your house\",\r\n      type: \"recreational\",\r\n      price: 0.3,\r\n      accessibility: 0.4,\r\n    },\r\n  };\r\n}\r\n\r\nvar sortable = Object.entries(prev_state)\r\n  .sort(([, a], [, b]) => a.name.localeCompare(b.name))\r\n  .reduce((r, [k, v]) => ({ ...r, [k]: v }), {});\r\n\r\nfunction App() {\r\n  const saveFriend = (key, friend) => {\r\n    sortable[key] = {\r\n      name: friend.name,\r\n      email: friend.email,\r\n      activity: friend.activity,\r\n      price: friend.price,\r\n      accessibility: friend.accessibility,\r\n    };\r\n\r\n    localStorage.setItem(LOCALSTORAGE_KEY, JSON.stringify(sortable));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"navbar navbar-dark bg-dark box-shadow\">\r\n        <span className=\"navbar-brand d-flex align-items-center\">\r\n          <strong>Activity Ideas</strong>\r\n        </span>\r\n      </div>\r\n      <div className=\"container pt-4\">\r\n        <div className=\"card-container mb-4\">\r\n          {Object.entries(sortable).map(([key, value]) => {\r\n            return (\r\n              <FriendCard\r\n                key={`friend-${key}`}\r\n                data={value}\r\n                idx={key}\r\n                save={saveFriend}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        {/* <div className=\"col-md-6 offset-md-3\">\r\n          {notification && (\r\n            <div className=\"alert alert-success\" role=\"alert\">\r\n              {notification}\r\n            </div>\r\n          )}\r\n        </div> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}